#a4051407e07d7699ae90a75b81bcdf0b1549d8e1929d07ed5f383389331500206e756916aa3c18b96d9ba
from typing import Tuple

from vkbottle import VKAPIError, API, PhotoMessageUploader
from vkbottle.user import User, Message
from vkbottle.dispatch.rules.base import CommandRule

import time
import requests
import re
from PIL import Image, ImageDraw, ImageFont, ImageOps

sessia='a4051407e07d7699ae90a75b81bcdf0b1549d8e1929d07ed5f383389331500206e756916aa3c18b96d9ba'
user = User(sessia)
api=API(sessia)


# –ï—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ sticker_handler - –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.

'''
@user.on.message(attachment="sticker")
async def sticker_handler(message: Message):
	await message.answer(f"Sticker ID: {message.attachments[0].sticker.sticker_id}")
'''
'''
@user.on.message(func=lambda message: len(message.text) < 5)
async def text_handler(message: Message):
	await message.answer("Message less 5 symbols")
'''
@user.on.chat_message(text=['–∫–∏–∫', '–±–∞–Ω', 'ban', 'kick'])
async def kick(message: Message):
  try:
    members = await api.messages.get_conversation_members(
          peer_id=message.peer_id,
          user_id=message.reply_message.from_id
        )
    admins = [member.member_id for member in members.items if member.is_admin]
  except:
    print('error')
  #if message.from_id not in admins:
  #  await message.answer('—Ç—ã –Ω–µ –æ–¥–º–µ–Ω –±–µ—Å–µ–¥—ã.')
  else:
    txt = message.reply_message.text
    await api.messages.remove_chat_user(message.peer_id - 2000000000, message.reply_message.from_id)
    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á—ë–Ω"

@user.on.message(text=['—Ü–∏—Ç–∞—Ç–∞', '—Ü–∏—Ç', '—Ü–∏—Ç–∞—Ç–Ω–∏', '—Ü–∏—Ç–∞'])
async def kick(message: Message):

  await message.answer('–û–∂–∏–¥–∞–π—Ç–µ...')

  people = await user.api.users.get(user_ids=message.reply_message.from_id, fields='photo_max')


  text = message.reply_message.text

  background = Image.open('—Ñ–æ–Ω_3_–Ω–æ–≤—ã–π.QFSqF.jpg')
  idraw = ImageDraw.Draw(background)

  headline = ImageFont.truetype('arial.ttf', size=52)
  text_font = ImageFont.truetype('arial.ttf', size=35)
  name_font = ImageFont.truetype('arial.ttf', size=38)

  text = text + '¬ª'
  head = "–¶–∏—Ç–∞—Ç—ã –≤–µ–ª–∏–∫–∏—Ö –ª—é–¥–µ–π"
  text = '¬´' + text[:37] + '\n' + text[37:]
  try:
    text = text[:74] + '\n' + text[74:]
  except:
    pass

  first_name_users = people[0].first_name
  last_name_users = people[0].last_name

  idraw.text((130, 55), head, font=headline)
  idraw.text((130, 132), text, font=text_font)
  idraw.text((245, 255), " ‚Äì " + first_name_users + " " + last_name_users, font=name_font)
  
  #photo = user.api.users.get(user_ids=message.reply_message.from_id, fields='photo_400')
  
  photo = people[0].photo_max
  #await message.answer(str(photo))

  ava = requests.get(photo, allow_redirects=True)
  open('ava.png', 'wb').write(ava.content)

  size = (110, 110)

  ava = Image.open('ava.png').convert('RGB')

  mask = Image.new('L', size, 0)
  draw = ImageDraw.Draw(mask)
  draw.ellipse((0, 0) + size, fill=255)

  ava = ava.resize(size).convert('RGB')

  output = ImageOps.fit(ava, mask.size, centering=(0.5, 0.5))
  output.putalpha(mask)
  output.thumbnail(size, Image.ANTIALIAS)
  output.save('ava.png')

  ava = Image.open('ava.png')

  background.paste(ava, (130, 225), ava)

  background.save('citata.png')

  vk_cita = PhotoMessageUploader(user.api)
  photo_cita_vk = await vk_cita.upload("citata.png")
  await message.answer("üí¨ –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞ –≥–æ—Ç–æ–≤–∞!", attachment=photo_cita_vk)



@user.on.message()
async def frend(message:Message):
  if message.text.lower().startswith('–∏–Ω—Ñ–∞'):
    try:
      try:
        ids = message.reply_message.from_id
      except:
        chel= re.findall(r"[0-9]+", message.text)[0]
        chel = ''.join(chel).lower()
        ids = await api.users.get(chel)
        ids = ids[0].id


      zapros = requests.post(f'http://v1209481.hosted-by-vdsina.ru/method/users.get?token={sessia}&user_ids={int(ids)}&fields=status')
      zapros = zapros.json()
      await message.answer(f'–ò–º—è: {zapros[0]["first_name"]}\n–§–∞–º–∏–ª–∏—è: {zapros[0]["last_name"]}\nID: {zapros[0]["id"]}\n–ó–∞–∫—Ä—ã—Ç: {zapros[0]["is_closed"]} \nC—Ç–∞—Ç—É—Å: {zapros[0]["status"]}')
    except:
      await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
      #################################################################
  elif message.text.lower().startswith('—Å—Ç–∏–∫–µ—Ä—ã'):
    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞—Ö!')
    try:
      chel= re.findall(r"[0-9]+", message.text)[0]
      chel = ''.join(chel).lower()
    except:
      chel = message.from_id
    ids = await api.users.get(chel)
    ids = ids[0].id
    q = requests.post(f'http://v1209481.hosted-by-vdsina.ru/method/users.stickers?token={sessia}&user_id={int(ids)}')
    w = requests.post(f'http://v1209481.hosted-by-vdsina.ru/method/users.stickers?token={sessia}&user_id={int(ids)}&free=true')
    ####await message.answer(str(q.json()))
    countFree = str(w.json()['count'])
    countSell = int(q.json()['count'])
    names=[]
    votes = str(q.json()['stickers_vote'])
    i=0
    try:
      while i<=countSell-1:
        names.append(q.json()['sticker'][i]['name'])
        i+=1
      names = ', '.join(names)
      await message.answer(f'–£ [id{ids}|—ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] {countFree} —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤, –∏–∑ –Ω–∏—Ö {str(countSell)} –ø–ª–∞—Ç–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–æ–≤:\n\n{names}\n\n–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n‚Äî {votes} –≥–æ–ª–æ—Å–æ–≤\n‚Äî {int(votes)*7} —Ä—É–±–ª–µ–π')
    except:
      await message.answer(f'–£ [id{ids}|—ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –æ—Ç—Å—Ç—É—Ç—Å–≤—É—é—Ç –ø–ª–∞—Ç–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏!')

    ##########################################################



user.run_forever()